#!/usr/bin/python
# -*- coding: utf-8 -*-

# 训练CNN模型对CIFAR10数据集物体识别
# Train a simple deep CNN on the CIFAR10 small images dataset.
# It gets to 75% validation accuracy in 25 epochs, and 79% after 50 epochs.
# Output after 25 epochs on CPU(i5-7500)/GPU(1050Ti): ~0.7387

import os
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D

batch_size = 32         # min-batch size
num_classes = 10        # 类别数
epochs = 25             # 循环次数
data_augmentation = True
num_predictions = 20
save_dir = os.path.join(os.getcwd(), 'saved_models')
model_name = 'keras_cifar10_trained_model.h5'

# The data, split between train and test sets:
# CIFAR10数据集: 训练集50000,测试集10000
print('========== 1.Loading data...')
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
print('----- x_train shape:', x_train.shape)
print('----- y_train shape:', y_train.shape)
print('----- x_test  shape:', x_test.shape)
print('----- y_test  shape:', y_test.shape)

# Convert class vectors to binary class matrices.
# 对每条数据的类别标签(train/test)转换为类别数目的0/1值序列(one-hot)
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

# 搭建神经网络模型
print('========== 2.Building model...')
model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same', input_shape=x_train.shape[1:]))    # 输出(*,32,32,32)
model.add(Activation('relu'))               # 输出(*,32,32,32)
model.add(Conv2D(32, (3, 3)))               # 输出(*,30,30,32)
model.add(Activation('relu'))               # 输出(*,30,30,32)
model.add(MaxPooling2D(pool_size=(2, 2)))   # 输出(*,15,15,32)
model.add(Dropout(0.25))                    # 输出(*,15,15,32)

model.add(Conv2D(64, (3, 3), padding='same'))   # 输出(*,15,15,64)
model.add(Activation('relu'))                   # 输出(*,15,15,64)
model.add(Conv2D(64, (3, 3)))                   # 输出(*,13,13,64)
model.add(Activation('relu'))                   # 输出(*,13,13,64)
model.add(MaxPooling2D(pool_size=(2, 2)))       # 输出(*,6,6,64)
model.add(Dropout(0.25))                        # 输出(*,6,6,64)

model.add(Flatten())                # 输出(*,2304)
model.add(Dense(512))               # 输出(*,512)
model.add(Activation('relu'))       # 输出(*,512)
model.add(Dropout(0.5))             # 输出(*,512)
model.add(Dense(num_classes))       # 输出(*,10)
model.add(Activation('softmax'))    # 输出(*,10)

# initiate RMSprop optimizer
opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])
model.summary()

# 数据预处理/增强+模型训练
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

if not data_augmentation:
    print('----- Not using data augmentation.')
    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs,
              validation_data=(x_test, y_test), shuffle=True)
else:
    print('----- Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    # 图片生成器,用以生成一个batch的图像数据
    datagen = ImageDataGenerator(
        featurewise_center=False,               # set input mean to 0 over the dataset(输入数据集去中心化,均值为0)
        samplewise_center=False,                # set each sample mean to 0(输入数据每个样本均值为0)
        featurewise_std_normalization=False,    # divide inputs by std of the dataset(输入除以数据集的标准差)
        samplewise_std_normalization=False,     # divide each input by its std(输入每个样本除以其自身的标准差)
        zca_whitening=False,        # apply ZCA whitening(输入数据ZCA白化)
        rotation_range=0,           # randomly rotate images in the range (degrees, 0 to 180)(图片随机转动角度)
        width_shift_range=0.1,      # randomly shift images horizontally (fraction of total width)(图片水平偏移幅度)
        height_shift_range=0.1,     # randomly shift images vertically (fraction of total height)(图片竖直偏移幅度)
        horizontal_flip=True,       # randomly flip images(随机水平翻转)
        vertical_flip=False)        # randomly flip images(随机竖直翻转)

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),
                        epochs=epochs, validation_data=(x_test, y_test), workers=4)

# Save model and weights
if not os.path.isdir(save_dir):
    os.makedirs(save_dir)
model_path = os.path.join(save_dir, model_name)
model.save(model_path)
print('----- Saved trained model at %s ' % model_path)

# Score trained model.
scores = model.evaluate(x_test, y_test, verbose=1)
print('----- Test loss:', scores[0])
print('----- Test accuracy:', scores[1])
